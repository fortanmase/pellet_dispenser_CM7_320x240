/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef MAINVIEWBASE_HPP
#define MAINVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/main_screen/MainPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/widgets/Button.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/containers/ScrollableContainer.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/ToggleButton.hpp>
#include <touchgfx/containers/Slider.hpp>
#include <touchgfx/containers/SlideMenu.hpp>
#include <touchgfx/widgets/TextureMapper.hpp>
#include <touchgfx/widgets/ButtonWithIcon.hpp>
#include <touchgfx/widgets/canvas/Circle.hpp>
#include <touchgfx/widgets/canvas/PainterRGB565.hpp>
#include <touchgfx/widgets/canvas/Line.hpp>
#include <touchgfx/containers/clock/DigitalClock.hpp>
#include <touchgfx/widgets/Image.hpp>

class MainViewBase : public touchgfx::View<MainPresenter>
{
public:
    MainViewBase();
    virtual ~MainViewBase();
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void settingsButtonPressed()
    {
        // Override and implement this function in Main
    }
    virtual void infoButtonPressed()
    {
        // Override and implement this function in Main
    }
    virtual void backButtonPressed()
    {
        // Override and implement this function in Main
    }
    virtual void homeButtonPressed()
    {
        // Override and implement this function in Main
    }
    virtual void displaySettingsButtonPressed()
    {
        // Override and implement this function in Main
    }
    virtual void soundSettingsButtonPressed()
    {
        // Override and implement this function in Main
    }
    virtual void dispenserSettingsButtonPressed()
    {
        // Override and implement this function in Main
    }
    virtual void decScreenTimeout()
    {
        // Override and implement this function in Main
    }
    virtual void incScreenTimeout()
    {
        // Override and implement this function in Main
    }
    virtual void toggleDarkTheme()
    {
        // Override and implement this function in Main
    }
    virtual void decPelletQuantity()
    {
        // Override and implement this function in Main
    }
    virtual void incPelletQuantity()
    {
        // Override and implement this function in Main
    }
    virtual void decPelletInterval()
    {
        // Override and implement this function in Main
    }
    virtual void incPelletInterval()
    {
        // Override and implement this function in Main
    }
    virtual void decPelletSpeed()
    {
        // Override and implement this function in Main
    }
    virtual void incPelletSpeed()
    {
        // Override and implement this function in Main
    }
    virtual void alertSlideMenuTriggered()
    {
        // Override and implement this function in Main
    }
    virtual void autoDispenseButtonPressed()
    {
        // Override and implement this function in Main
    }
    virtual void manualDispenseButtonPressed()
    {
        // Override and implement this function in Main
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Box backgndBox;
    touchgfx::Container functionContainer;
    touchgfx::Button homeButton;
    touchgfx::Button backButton;
    touchgfx::Container infoContainer;
    touchgfx::TextArea infoHeaderText;
    touchgfx::ScrollableContainer scrollableContainer1;
    touchgfx::TextArea infoTextArea;
    touchgfx::Container dispenserSettingsContainer;
    touchgfx::TextAreaWithOneWildcard pelSpeedValue;
    touchgfx::Button pelSpeedIncButton;
    touchgfx::Button pelSpeedDecButton;
    touchgfx::TextArea dispenserSpeed;
    touchgfx::Button pelIntervDecButton;
    touchgfx::Button pelIntervIncButton;
    touchgfx::TextAreaWithOneWildcard pelIntervValue;
    touchgfx::TextArea dispenseIntervalText;
    touchgfx::TextAreaWithOneWildcard pelQuantValue;
    touchgfx::Button pelQuantIncButton;
    touchgfx::Button pelQuantDecButton;
    touchgfx::TextArea dispenseQuantityText;
    touchgfx::TextArea dispenserHeaderText;
    touchgfx::Container soundSettingsContainer;
    touchgfx::Button testSoundButton;
    touchgfx::TextArea testSoundText;
    touchgfx::ToggleButton muteButton;
    touchgfx::TextArea muteText;
    touchgfx::Slider volumeSlider;
    touchgfx::TextArea volumeText;
    touchgfx::SlideMenu alertSlideMenu;
    touchgfx::ToggleButton toggleButtonServiceAlarm;
    touchgfx::TextArea textDispenserServiceAlarm;
    touchgfx::ToggleButton toggleButtonStalledAlarm_1;
    touchgfx::TextArea textDispenserStalledAlarm;
    touchgfx::ToggleButton toggleButtonEmptyAlarm_1;
    touchgfx::TextArea textDispenserEmptyAlarm;
    touchgfx::ToggleButton toggleButtonClockAlarm_1;
    touchgfx::TextArea textClockAlarm;
    touchgfx::Button buttonEnableAlerts;
    touchgfx::TextureMapper textureAlertsButton;
    touchgfx::TextArea enableAlertsText;
    touchgfx::TextArea soundHeaderText;
    touchgfx::Container displaySettingsContainer;
    touchgfx::Button screenToutDecButton;
    touchgfx::Button screenToutIncButton;
    touchgfx::TextAreaWithOneWildcard screenToutValue;
    touchgfx::TextArea screenTimeoutText;
    touchgfx::ToggleButton darkThemeButton;
    touchgfx::TextArea darkThemeText;
    touchgfx::ToggleButton autoBrightnessButton;
    touchgfx::TextArea autoBrightnessText;
    touchgfx::Slider brightnessSlider;
    touchgfx::TextArea brightnessText;
    touchgfx::TextArea displayHeaderText;
    touchgfx::Container settingsContainer;
    touchgfx::ButtonWithIcon dispenserSettingsButton;
    touchgfx::TextArea dispenserSettingsText;
    touchgfx::ButtonWithIcon soundSettingsButton;
    touchgfx::TextArea soundSettingsText;
    touchgfx::ButtonWithIcon displaySettingsButton;
    touchgfx::TextArea displaySettingsText;
    touchgfx::TextArea settingsHeaderText;
    touchgfx::Container mainContainer;
    touchgfx::ButtonWithIcon manualDispenseButton;
    touchgfx::ButtonWithIcon autoDispenseButton;
    touchgfx::Circle circleAutoDispenseStatus;
    touchgfx::PainterRGB565 circleAutoDispenseStatusPainter;
    touchgfx::Button settingsButton;
    touchgfx::Button infoButton;
    touchgfx::Container statusContainer;
    touchgfx::Container dispensedContainer;
    touchgfx::Button dispensedResetButton;
    touchgfx::TextAreaWithOneWildcard dispensedPellets;
    touchgfx::Container dispensingContainer;
    touchgfx::TextAreaWithOneWildcard dispenserDispensing;
    touchgfx::TextureMapper dispenseInProgressTexture;
    touchgfx::Container stalledContainer;
    touchgfx::TextArea dispenserStalledText;
    touchgfx::TextureMapper statusStalledTexture;
    touchgfx::Container emptyContainer;
    touchgfx::TextArea dispenserEmptyText;
    touchgfx::TextureMapper statusEmptyTexture;
    touchgfx::Container readyContainer;
    touchgfx::TextArea dispenserReadyText;
    touchgfx::TextureMapper statusReadyTexture;
    touchgfx::Container headerContainer;
    touchgfx::Line headerLine;
    touchgfx::PainterRGB565 headerLinePainter;
    touchgfx::DigitalClock digitalClock1;
    touchgfx::Container startupContainer;
    touchgfx::Image metrisLogo;

    /*
     * Wildcard Buffers
     */
    static const uint16_t PELSPEEDVALUE_SIZE = 10;
    touchgfx::Unicode::UnicodeChar pelSpeedValueBuffer[PELSPEEDVALUE_SIZE];
    static const uint16_t PELINTERVVALUE_SIZE = 10;
    touchgfx::Unicode::UnicodeChar pelIntervValueBuffer[PELINTERVVALUE_SIZE];
    static const uint16_t PELQUANTVALUE_SIZE = 10;
    touchgfx::Unicode::UnicodeChar pelQuantValueBuffer[PELQUANTVALUE_SIZE];
    static const uint16_t SCREENTOUTVALUE_SIZE = 10;
    touchgfx::Unicode::UnicodeChar screenToutValueBuffer[SCREENTOUTVALUE_SIZE];

private:

    /*
     * Canvas Buffer Size
     */
    static const uint32_t CANVAS_BUFFER_SIZE = 4800;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];

    /*
     * Callback Declarations
     */
    touchgfx::Callback<MainViewBase, const touchgfx::AbstractButton&> buttonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);

};

#endif // MAINVIEWBASE_HPP
