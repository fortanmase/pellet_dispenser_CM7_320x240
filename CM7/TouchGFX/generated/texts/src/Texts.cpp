/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */

#include <stdarg.h>
#include <touchgfx/TextProvider.hpp>
#include <touchgfx/Texts.hpp>
#include <touchgfx/TypedText.hpp>
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
    va_end(pArg);
    return width;
}

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
    va_end(pArg);
    return width;
}

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
    {
        substituteGlyphs();
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
}

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
    va_list pArg;
    va_start(pArg, format);
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
    va_end(pArg);
}

// Default TypedTextDatabase
extern const touchgfx::TypedText::TypedTextData* const typedTextDatabaseArray[];

TEXT_LOCATION_FLASH_PRAGMA
KEEP extern const touchgfx::Unicode::UnicodeChar texts_all_languages[] TEXT_LOCATION_FLASH_ATTRIBUTE = {
    0x48, 0x65, 0x72, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x6e, 0xa, 0x69, 0x6e, 0x66, 0x6f, 0x20, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x50, 0x65, 0x6c, 0x6c, 0x65, 0x74, 0xa, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x72, 0x2e, 0xa, 0x57, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x6f, 0x75, 0x72, 0x20, 0x70, 0x65, 0x6c, 0x6c, 0x65, 0x74, 0xa, 0x64, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x72, 0x21, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x69, 0x73, 0xa, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0xa, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x20, 0x64, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0xa, 0x70, 0x65, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x79, 0x6f, 0x75, 0x72, 0xa, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x6e, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0xa, 0x54, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x65, 0x6c, 0x6c, 0x65, 0x74, 0xa, 0x64, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x72, 0x2c, 0x20, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x79, 0x20, 0x66, 0x69, 0x6c, 0x6c, 0x20, 0x74, 0x68, 0x65, 0xa, 0x68, 0x6f, 0x70, 0x70, 0x65, 0x72, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0xa, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x70, 0x65, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x73, 0x65, 0x74, 0xa, 0x74, 0x68, 0x65, 0x20, 0x64, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x61, 0x74, 0x65, 0x20, 0x75, 0x73, 0x69, 0x6e, 0x67, 0xa, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x2e, 0x20, 0x54, 0x68, 0x65, 0xa, 0x64, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x72, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x74, 0x68, 0x65, 0x6e, 0xa, 0x64, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x20, 0x70, 0x65, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0xa, 0x61, 0x63, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0xa, 0x50, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x6e, 0x6f, 0x74, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0xa, 0x70, 0x65, 0x6c, 0x6c, 0x65, 0x74, 0x20, 0x64, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0xa, 0x73, 0x75, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x75, 0x73, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0xa, 0x66, 0x6c, 0x61, 0x6d, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0xa, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0xa, 0x61, 0x6e, 0x79, 0x20, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x69, 0x74, 0x73, 0xa, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x20, 0x75, 0x73, 0x65, 0x2e, 0xa, 0x46, 0x6f, 0x72, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x61, 0x6c, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2c, 0xa, 0x77, 0x65, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x20, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0xa, 0x74, 0x68, 0x65, 0x20, 0x68, 0x6f, 0x70, 0x70, 0x65, 0x72, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x64, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x72, 0xa, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x20, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x6c, 0x79, 0x2e, 0xa, 0x52, 0x65, 0x66, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0xa, 0x66, 0x6f, 0x72, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0xa, 0x6f, 0x6e, 0x20, 0x68, 0x6f, 0x77, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x6f, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0xa, 0x49, 0x66, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0xa, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x72, 0x6e, 0x73, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x79, 0x6f, 0x75, 0x72, 0xa, 0x70, 0x65, 0x6c, 0x6c, 0x65, 0x74, 0x20, 0x64, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x72, 0x2c, 0x20, 0x70, 0x6c, 0x65, 0x61, 0x73, 0x65, 0xa, 0x64, 0x6f, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x68, 0x65, 0x73, 0x69, 0x74, 0x61, 0x74, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0xa, 0x6f, 0x75, 0x72, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0xa, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x20, 0x57, 0x65, 0x20, 0x61, 0x72, 0x65, 0x20, 0x68, 0x65, 0x72, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x68, 0x65, 0x6c, 0x70, 0xa, 0x61, 0x6e, 0x64, 0x20, 0x65, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x67, 0x65, 0x74, 0xa, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x79, 0x6f, 0x75, 0x72, 0xa, 0x70, 0x65, 0x6c, 0x6c, 0x65, 0x74, 0x20, 0x64, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x72, 0x2e, 0x0, // @0 "Here is an example of an\ninfo section for the Pellet\nDispenser.\nWelcome to our pellet\ndispenser! This device is\ndesigned to efficiently\nand accurately dispense\npellets for your\nconvenience.\nTo use the pellet\ndispenser, simply fill the\nhopper with the desired\namount of pellets, and set\nthe dispensing rate using\nthe controls. The\ndispenser will then\ndispense pellets\naccording to your settings.\nPlease note that the\npellet dispenser is not\nsuitable for use with\nflammable materials, and\nshould not be used for\nany purpose other than its\nintended use.\nFor optimal performance,\nwe recommend cleaning\nthe hopper and dispenser\nmechanism regularly.\nRefer to the user manual\nfor specific instructions\non how to do this.\nIf you have any questions\nor concerns about your\npellet dispenser, please\ndo not hesitate to contact\nour customer support\nteam. We are here to help\nand ensure that you get\nthe most out of your\npellet dispenser."
    0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x2, 0x20, 0x70, 0x65, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x0, // @925 "Dispensing <> pellets"
    0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x20, 0x2d, 0x20, 0x2, 0x0, // @946 "Dispensed - <>"
    0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x72, 0x20, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x0, // @960 "Dispenser Settings"
    0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x72, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x0, // @979 "Dispenser Service"
    0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x72, 0x20, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x0, // @997 "Dispenser Stalled"
    0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x0, // @1015 "Display Settings"
    0x41, 0x75, 0x74, 0x6f, 0x20, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x0, // @1032 "Auto Brightness"
    0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x72, 0x20, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x0, // @1048 "Dispenser Empty"
    0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x72, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79, 0x0, // @1064 "Dispenser Ready"
    0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x0, // @1080 "Screen Timeout"
    0x53, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x0, // @1095 "Sound Settings"
    0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x0, // @1110 "Enable Alerts"
    0x2, 0x20, 0x6d, 0x69, 0x6e, 0x0, // @1124 "<> min"
    0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x20, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x0, // @1130 "Clock Alarm"
    0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x0, // @1142 "Information"
    0x44, 0x61, 0x72, 0x6b, 0x20, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x0, // @1154 "Dark Theme"
    0x54, 0x65, 0x73, 0x74, 0x20, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x0, // @1165 "Test Sound"
    0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x72, 0x0, // @1176 "Dispenser"
    0x2, 0x73, 0x0, // @1186 "<>s"
    0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x0, // @1189 "Interval"
    0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x0, // @1198 "Quantity"
    0x78, 0x2, 0x0, // @1207 "x<>"
    0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x0, // @1210 "Display"
    0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x0, // @1218 "Volume"
    0x53, 0x70, 0x65, 0x65, 0x64, 0x0, // @1225 "Speed"
    0x31, 0x30, 0x30, 0x30, 0x0, // @1231 "1000"
    0x4d, 0x75, 0x74, 0x65, 0x0, // @1236 "Mute"
    0x31, 0x2e, 0x35, 0x0, // @1241 "1.5"
    0x31, 0x30, 0x30, 0x0, // @1245 "100"
    0x31, 0x30, 0x0 // @1249 "10"
};

TEXT_LOCATION_FLASH_PRAGMA
KEEP extern const uint32_t indicesGb[] TEXT_LOCATION_FLASH_ATTRIBUTE;

// Array holding dynamically installed languages
struct TranslationHeader
{
    uint32_t offset_to_texts;
    uint32_t offset_to_indices;
    uint32_t offset_to_typedtext;
};
static const TranslationHeader* languagesArray[1] = { 0 };

// Compiled and linked in languages
static const uint32_t* const staticLanguageIndices[] = {
    indicesGb
};

touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
    {
        if (languagesArray[id] != 0)
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
            currentLanguageIndices = staticLanguageIndices[id];
            currentLanguageTypedText = typedTextDatabaseArray[id];
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
    }
}

void touchgfx::Texts::setTranslation(touchgfx::LanguageId id, const void* translation)
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
}
